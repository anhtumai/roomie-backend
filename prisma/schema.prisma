// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

generator client {
	provider = "prisma-client-js"
	previewFeatures = ["referentialActions"]
}

model Account {
	@@map(name: "account")
	id				Int					@id @default(autoincrement())
	username		String				@unique @db.VarChar(30)
	name			String				@db.VarChar(50)
	password		String

	apartment		Apartment?			@relation("Member", fields: [apartment_id], references: [id])
	admin_apartment	Apartment?			@relation("Admin")
	apartment_id		Int?
	invitors		Invitation[]		@relation("Invitor")
	invitees		Invitation[]		@relation("Invitee")
	tasks			Task[]				@relation("Creator")
	task_requests	TaskRequest[]		@relation("RequestTo")
	task_assignments	TaskAssignment[]	@relation("AssignTo")
}

model Apartment {
	@@map(name: "apartment")
	id			Int     @id @default(autoincrement())
	name		String	@unique @db.VarChar(30)
	admin		Account @relation("Admin", fields: [admin_id], references: [id])
	admin_id	Int

	members		Account[]	@relation("Member")
	invitations	Invitation[]
}

model Invitation {
	@@map(name: "invitation")
	id          Int       @id @default(autoincrement())
	invitor		Account		@relation("Invitor", fields: [invitor_id], references: [id])
	invitor_id	Int
	invitee		Account		@relation("Invitee", fields: [invitee_id], references: [id])
	invitee_id	Int
	apartment	Apartment	@relation(fields: [apartment_id], references: [id])
	apartment_id	Int
	@@unique(fields: [invitor_id, invitee_id])
}

model Task {
	@@map(name: "task")
	id			Int		@id	@default(autoincrement())
	name		String	@db.VarChar(50)
	description	String	@db.VarChar(500)
	frequency	Int
	difficulty	Int
	start		DateTime
	end			DateTime
	creator		Account	@relation("Creator", fields: [creator_id], references: [id])
	creator_id	Int

	task_requests	TaskRequest[]		@relation("TaskRequest")
	task_assignments	TaskAssignment[]	@relation("TaskAssignment")
}

model TaskRequest {
	@@map(name: "taskrequest")
	id			Int		@id	@default(autoincrement())

	assigner	Account	@relation("RequestTo", fields: [assigner_id], references: [id])
	assigner_id	Int
	
	task		Task	@relation("TaskRequest", fields: [task_id], references: [id], onDelete: Cascade)
	task_id		Int
	
	state		RequestType	@default(pending)
	@@unique(fields: [assigner_id, task_id])
}

model TaskAssignment {
	@@map(name: "taskassignment")
	id				Int		@id	@default(autoincrement())
	
	assigner		Account	@relation("AssignTo", fields: [assigner_id], references: [id])
	assigner_id		Int

	task			Task	@relation("TaskAssignment", fields: [task_id], references: [id], onDelete: Cascade)
	task_id			Int
	
	order			Int
	@@unique(fields: [assigner_id, task_id])
}

enum RequestType {
	accepted
	pending
	rejected
}
