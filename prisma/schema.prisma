// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

generator client {
	provider = "prisma-client-js"
}

model Account {
	@@map(name: "account")
	id				Int				@id @default(autoincrement())
	username		String			@unique @db.VarChar(30)
	name			String			@db.VarChar(50)
	password		String

	apartment		Apartment?		@relation("Member", fields: [apartmentId], references: [id])
	adminApartment	Apartment?		@relation("Admin")
	apartmentId		Int?
	invitors		Invitation[]	@relation("Invitor")
	invitees		Invitation[]	@relation("Invitee")
	tasks			Task[]			@relation("Creator")
	taskrequests	TaskRequest[]	@relation("RequestTo")
}

model Apartment {
	@@map(name: "apartment")
	id			Int     @id @default(autoincrement())
	name		String	@unique @db.VarChar(30)
	admin		Account @relation("Admin", fields: [adminId], references: [id])
	adminId		Int

	members		Account[]	@relation("Member")
	invitations	Invitation[]
}

model Invitation {
	@@map(name: "invitation")
	id          Int       @id @default(autoincrement())
	invitor		Account		@relation("Invitor", fields: [invitorId], references: [id])
	invitorId	Int
	invitee		Account		@relation("Invitee", fields: [inviteeId], references: [id])
	inviteeId	Int
	apartment	Apartment	@relation(fields: [apartmentId], references: [id])
	apartmentId	Int
	@@unique(fields: [invitorId, inviteeId])
}

model Task {
	@@map(name: "task")
	id			Int		@id	@default(autoincrement())
	name		String	@db.VarChar(50)
	description	String	@db.VarChar(500)
	frequency	Int
	difficulty	Int
	start		DateTime
	end			DateTime
	creator		Account	@relation("Creator", fields: [creatorId], references: [id])
	creatorId	Int

	taskrequest	TaskRequest[]	@relation("TaskRequest")
}

model TaskRequest {
	@@map(name: "taskrequest")
	id			Int		@id	@default(autoincrement())

	assigner	Account	@relation("RequestTo", fields: [assignerId], references: [id])
	assignerId	Int
	
	task		Task	@relation("TaskRequest", fields: [taskId], references: [id])
	taskId		Int
	
	state		RequestType	@default(pending)
}

enum RequestType {
	accepted
	pending
	rejected
}
